version: '3.8'

services:
  # Note: Using external Neon PostgreSQL database, so local db service is commented out
  # db:
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB:-multitenant_db}
  #     POSTGRES_USER: ${POSTGRES_USER:-docuser}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "${DB_PORT:-5432}:5432"
  #   networks:
  #     - multitenant-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-docuser} -d ${POSTGRES_DB:-multitenant_db}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this-in-production}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-west-1}
      - GROQ_API_KEY=${GROQ_API_KEY}
    # depends_on:
    #   db:
    #     condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - multitenant-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - REACT_APP_API_URL=http://localhost:${BACKEND_PORT:-8000}
    depends_on:
      - backend
    networks:
      - multitenant-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  multitenant-network:
    driver: bridge